1.- crear las tablas de log para;
    - cambio de apoderados
    - cambio de grados
    - cambio de cursos



tabla log_cambio_apoderado
    - id_registro
    - id_estudiante
    - id_old_apoderado
    - id_new_apoderado
    - tipo_apoderado
    - periodo_matricula
    - fecha_registro -> now()


-- CREACIÓN DE LA FUNCIÓN APODERADO TITULAR
CREATE OR REPLACE FUNCTION libromatricula.sp_log_apoderado()
RETURNS TRIGGER AS $$

DECLARE
	var_old_apoderado INT;
	var_new_apoderado INT;
	var_tipo_apoderado TEXT;
	
BEGIN
	-- ASIGNACION DE LAS VARIABLES
	IF old.id_apoderado_titular IS DISTINCT FROM new.id_apoderado_titular THEN
		var_old_apoderado := COALESCE(old.id_apoderado_titular, 0);
		var_new_apoderado := COALESCE(new.id_apoderado_titular, 0);
		var_tipo_apoderado := 'titular';
	ELSIF old.id_apoderado_suplente IS DISTINCT FROM new.id_apoderado_suplente THEN
		var_old_apoderado := COALESCE(old.id_apoderado_suplente, 0);
		var_new_apoderado := COALESCE(new.id_apoderado_suplente, 0);
		var_tipo_apoderado := 'suplente';
	END IF;
	
	-- INSERT DE LOS DATOS
	INSERT INTO libromatricula.log_cambio_apoderado
	(id_estudiante, id_old_apoderado, id_new_apoderado, tipo_apoderado, periodo_matricula)
	VALUES (old.id_estudiante, var_old_apoderado, var_new_apoderado, var_tipo_apoderado, old.anio_lectivo_matricula);

	RETURN new;
END
$$ LANGUAGE plpgsql;




-- CREACIÓN DEL TRIGGER PARA LOG APODERADO TITULAR
CREATE OR REPLACE TRIGGER tg_update_apoderado_titular
BEFORE UPDATE 
ON libromatricula.registro_matricula
FOR EACH ROW
WHEN (old.id_apoderado_titular IS DISTINCT FROM new.id_apoderado_titular)
EXECUTE PROCEDURE libromatricula.sp_log_apoderado();

-- CREACIÓN DEL TRIGGER PARA LOG APODERADO SUPLENTE
CREATE OR REPLACE TRIGGER tg_update_apoderado_suplente
BEFORE UPDATE 
ON libromatricula.registro_matricula
FOR EACH ROW
WHEN (old.id_apoderado_suplente IS DISTINCT FROM new.id_apoderado_suplente)
EXECUTE PROCEDURE libromatricula.sp_log_apoderado();